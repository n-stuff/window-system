using NStuff.Runtime.InteropServices.ObjectiveC;

namespace NStuff.WindowSystem.macOS
{
    public static class Selectors
    {
#pragma warning disable IDE1006 // Naming Styles
        public static SEL activateIgnoringOtherApps_ { get; } = SEL.Register("activateIgnoringOtherApps:");
        public static SEL addItem_ { get; } = SEL.Register("addItem:");
        public static SEL addItemWithTitle_action_keyEquivalent_ { get; } = SEL.Register("addItemWithTitle:action:keyEquivalent:");
        public static SEL addRepresentation_ { get; } = SEL.Register("addRepresentation:");
        public static SEL addTrackingArea_ { get; } = SEL.Register("addTrackingArea:");
        public static SEL alphaValue { get; } = SEL.Register("alphaValue");
        public static SEL arrangeInFront_ { get; } = SEL.Register("arrangeInFront:");
        public static SEL array { get; } = SEL.Register("array");
        public static SEL arrayWithObject_ { get; } = SEL.Register("arrayWithObject:");
        public static SEL arrayWithObjects_count_ { get; } = SEL.Register("arrayWithObjects:count:");
        public static SEL arrowCursor { get; } = SEL.Register("arrowCursor");
        public static SEL bitmapData { get; } = SEL.Register("bitmapData");
        public static SEL bounds { get; } = SEL.Register("bounds");
        public static SEL buttonNumber { get; } = SEL.Register("buttonNumber");
        public static SEL bytes { get; } = SEL.Register("bytes");
        public static SEL cascadeTopLeftFromPoint_ { get; } = SEL.Register("cascadeTopLeftFromPoint:");
        public static SEL center { get; } = SEL.Register("center");
        public static SEL close { get; } = SEL.Register("close");
        public static SEL containsObject_ { get; } = SEL.Register("containsObject:");
        public static SEL contentMaxSize { get; } = SEL.Register("contentMaxSize");
        public static SEL contentMinSize { get; } = SEL.Register("contentMinSize");
        public static SEL contentRectForFrameRect_ { get; } = SEL.Register("contentRectForFrameRect:");
        public static SEL contentView { get; } = SEL.Register("contentView");
        public static SEL convertRectFromScreen_ { get; } = SEL.Register("convertRectFromScreen:");
        public static SEL convertRectToBacking_ { get; } = SEL.Register("convertRectToBacking:");
        public static SEL convertRectToScreen_ { get; } = SEL.Register("convertRectToScreen:");
        public static SEL count { get; } = SEL.Register("count");
        public static SEL crosshairCursor { get; } = SEL.Register("crosshairCursor");
        public static SEL currentEvent { get; } = SEL.Register("currentEvent");
        public static SEL dateWithTimeIntervalSinceNow_ { get; } = SEL.Register("dateWithTimeIntervalSinceNow:");
        public static SEL declareTypes_owner_ { get; } = SEL.Register("declareTypes:owner:");
        public static SEL deltaX { get; } = SEL.Register("deltaX");
        public static SEL deltaY { get; } = SEL.Register("deltaY");
        public static SEL deminiaturize_ { get; } = SEL.Register("deminiaturize:");
        public static SEL detachNewThreadSelector_toTarget_withObject_ { get; } = SEL.Register("detachNewThreadSelector:toTarget:withObject:");
        public static SEL dictionaryWithObjects_forKeys_count_ { get; } = SEL.Register("dictionaryWithObjects:forKeys:count:");
        public static SEL distantFuture { get; } = SEL.Register("distantFuture");
        public static SEL distantPast { get; } = SEL.Register("distantPast");
        public static SEL draggingPasteboard { get; } = SEL.Register("draggingPasteboard");
        public static SEL draggingLocation { get; } = SEL.Register("draggingLocation");
        public static SEL draggingSourceOperationMask { get; } = SEL.Register("draggingSourceOperationMask");
        public static SEL frame { get; } = SEL.Register("frame");
        public static SEL frameRectForContentRect_ { get; } = SEL.Register("frameRectForContentRect:");
        public static SEL generalPasteboard { get; } = SEL.Register("generalPasteboard");
        public static SEL hasPreciseScrollingDeltas { get; } = SEL.Register("hasPreciseScrollingDeltas");
        public static SEL hide { get; } = SEL.Register("hide");
        public static SEL hide_ { get; } = SEL.Register("hide:");
        public static SEL hideOtherApplications_ { get; } = SEL.Register("hideOtherApplications:");
        public static SEL IBeamCursor { get; } = SEL.Register("IBeamCursor");
        public static SEL initWithAttributedString_ { get; } = SEL.Register("initWithAttributedString:");
        public static SEL
            initWithBitmapDataPlanes_pixelsWide_pixelsHigh_bitsPerSample_samplesPerPixel_hasAlpha_isPlanar_colorSpaceName_bitmapFormat_bytesPerRow_bitsPerPixel_ { get; } = SEL.Register("initWithBitmapDataPlanes:pixelsWide:pixelsHigh:bitsPerSample:samplesPerPixel:hasAlpha:isPlanar:colorSpaceName:bitmapFormat:bytesPerRow:bitsPerPixel:");
        public static SEL initWithContentRect_styleMask_backing_defer_ { get; } = SEL.Register("initWithContentRect:styleMask:backing:defer:");
        public static SEL initWithImage_hotSpot_ { get; } = SEL.Register("initWithImage:hotSpot:");
        public static SEL initWithRect_options_owner_userInfo_ { get; } = SEL.Register("initWithRect:options:owner:userInfo:");
        public static SEL initWithSize_ { get; } = SEL.Register("initWithSize:");
        public static SEL initWithString_ { get; } = SEL.Register("initWithString:");
        public static SEL initWithTitle_ { get; } = SEL.Register("initWithTitle:");
        public static SEL interpretKeyEvents_ { get; } = SEL.Register("interpretKeyEvents:");
        public static SEL isKeyWindow { get; } = SEL.Register("isKeyWindow");
        public static SEL isMiniaturized { get; } = SEL.Register("isMiniaturized");
        public static SEL isVisible { get; } = SEL.Register("isVisible");
        public static SEL isZoomed { get; } = SEL.Register("isZoomed");
        public static SEL keyCode { get; } = SEL.Register("keyCode");
        public static SEL keyWindow { get; } = SEL.Register("keyWindow");
        public static SEL length { get; } = SEL.Register("length");
        public static SEL level { get; } = SEL.Register("level");
        public static SEL locationInWindow { get; } = SEL.Register("locationInWindow");
        public static SEL makeKeyAndOrderFront_ { get; } = SEL.Register("makeKeyAndOrderFront:");
        public static SEL makeFirstResponder_ { get; } = SEL.Register("makeFirstResponder:");
        public static SEL miniaturize_ { get; } = SEL.Register("miniaturize:");
        public static SEL modifierFlags { get; } = SEL.Register("modifierFlags");
        public static SEL mouse_inRect_ { get; } = SEL.Register("mouse:inRect:");
        public static SEL mouseLocation { get; } = SEL.Register("mouseLocation");
        public static SEL mouseLocationOutsideOfEventStream { get; } = SEL.Register("mouseLocationOutsideOfEventStream");
        public static SEL mutableString { get; } = SEL.Register("mutableString");
        public static SEL nextEventMatchingMask_untilDate_inMode_dequeue_ =
            SEL.Register("nextEventMatchingMask:untilDate:inMode:dequeue:");
        public static SEL nextObject { get; } = SEL.Register("nextObject");
        public static SEL numberWithBool_ { get; } = SEL.Register("numberWithBool:");
        public static SEL @object { get; } = SEL.Register("object");
        public static SEL objectEnumerator { get; } = SEL.Register("objectEnumerator");
        public static SEL orderOut_ { get; } = SEL.Register("orderOut:");
        public static SEL otherEventWithType_location_modifierFlags_timestamp_windowNumber_context_subtype_data1_data2_ =
            SEL.Register("otherEventWithType:location:modifierFlags:timestamp:windowNumber:context:subtype:data1:data2:");
        public static SEL performMiniaturize_ { get; } = SEL.Register("performMiniaturize:");
        public static SEL performZoom_ { get; } = SEL.Register("performZoom:");
        public static SEL pressedMouseButtons { get; } = SEL.Register("pressedMouseButtons");
        public static SEL pointingHandCursor { get; } = SEL.Register("pointingHandCursor");
        public static SEL postEvent_atStart_ { get; } = SEL.Register("postEvent:atStart:");
        public static SEL processInfo { get; } = SEL.Register("processInfo");
        public static SEL processName { get; } = SEL.Register("processName");
        public static SEL propertyListForType_ { get; } = SEL.Register("propertyListForType:");
        public static SEL registerDefaults_ { get; } = SEL.Register("registerDefaults:");
        public static SEL registerForDraggedTypes_ { get; } = SEL.Register("registerForDraggedTypes:");
        public static SEL removeTrackingArea_ { get; } = SEL.Register("removeTrackingArea:");
        public static SEL requestUserAttention_ { get; } = SEL.Register("requestUserAttention:");
        public static SEL resizeLeftRightCursor { get; } = SEL.Register("resizeLeftRightCursor");
        public static SEL resizeUpDownCursor { get; } = SEL.Register("resizeUpDownCursor");
        public static SEL run { get; } = SEL.Register("run");
        public static SEL scrollingDeltaX { get; } = SEL.Register("scrollingDeltaX");
        public static SEL scrollingDeltaY { get; } = SEL.Register("scrollingDeltaY");
        public static SEL sendEvent_ { get; } = SEL.Register("sendEvent:");
        public static SEL separatorItem { get; } = SEL.Register("separatorItem");
        public static SEL set { get; } = SEL.Register("set");
        public static SEL setActivationPolicy_ { get; } = SEL.Register("setActivationPolicy:");
        public static SEL setAlphaValue_ { get; } = SEL.Register("setAlphaValue:");
        public static SEL setContentMaxSize_ { get; } = SEL.Register("setContentMaxSize:");
        public static SEL setContentMinSize_ { get; } = SEL.Register("setContentMinSize:");
        public static SEL setContentSize_ { get; } = SEL.Register("setContentSize:");
        public static SEL setContentView_ { get; } = SEL.Register("setContentView:");
        public static SEL setDelegate_ { get; } = SEL.Register("setDelegate:");
        public static SEL setFrameOrigin_ { get; } = SEL.Register("setFrameOrigin:");
        public static SEL setKeyEquivalentModifierMask_ { get; } = SEL.Register("setKeyEquivalentModifierMask:");
        public static SEL setLevel_ { get; } = SEL.Register("setLevel:");
        public static SEL setMainMenu_ { get; } = SEL.Register("setMainMenu:");
        public static SEL setNeedsDisplay_ { get; } = SEL.Register("setNeedsDisplay:");
        public static SEL setServicesMenu_ { get; } = SEL.Register("setServicesMenu:");
        public static SEL setString_ { get; } = SEL.Register("setString:");
        public static SEL setString_forType_ { get; } = SEL.Register("setString:forType:");
        public static SEL setStyleMask_ { get; } = SEL.Register("setStyleMask:");
        public static SEL setSubmenu_ { get; } = SEL.Register("setSubmenu:");
        public static SEL setTabbingMode_ { get; } = SEL.Register("setTabbingMode:");
        public static SEL setTitle_ { get; } = SEL.Register("setTitle:");
        public static SEL setWindowsMenu_ { get; } = SEL.Register("setWindowsMenu:");
        public static SEL sharedApplication { get; } = SEL.Register("sharedApplication");
        public static SEL startNewThread_ { get; } = SEL.Register("startNewThread:");
        public static SEL standardUserDefaults { get; } = SEL.Register("standardUserDefaults");
        public static SEL stop_ { get; } = SEL.Register("stop:");
        public static SEL @string { get; } = SEL.Register("string");
        public static SEL stringForType_ { get; } = SEL.Register("stringForType:");
        public static SEL styleMask { get; } = SEL.Register("styleMask");
        public static SEL terminate_ { get; } = SEL.Register("terminate:");
        public static SEL timestamp { get; } = SEL.Register("timestamp");
        public static SEL title { get; } = SEL.Register("title");
        public static SEL type { get; } = SEL.Register("type");
        public static SEL types { get; } = SEL.Register("types");
        public static SEL unhide { get; } = SEL.Register("unhide");
        public static SEL unhideAllApplications_ { get; } = SEL.Register("unhideAllApplications:");
        public static SEL updateTrackingAreas { get; } = SEL.Register("updateTrackingAreas");
        public static SEL window { get; } = SEL.Register("window");
        public static SEL zoom_ { get; } = SEL.Register("zoom:");
    }
}
